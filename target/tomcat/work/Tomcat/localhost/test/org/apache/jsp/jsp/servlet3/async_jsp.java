/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.30
 * Generated at: 2014-05-27 03:06:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.servlet3;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class async_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<!-- Include required JS files -->\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${basePath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/js/shCore.js\"></script>\r\n");
      out.write(" \r\n");
      out.write("<!--\r\n");
      out.write("    At least one brush, here we choose JS. You need to include a brush for every \r\n");
      out.write("    language you want to highlight\r\n");
      out.write("-->\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${basePath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/js/shBrushJava.js\"></script>\r\n");
      out.write(" \r\n");
      out.write("<!-- Include *at least* the core style and default theme -->\r\n");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${basePath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/css/shCore.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${basePath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/css/shThemeDefault.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n");
      out.write("\r\n");
      out.write("<!-- Finally, to actually run the highlighter, you need to include this JS on your page -->\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("     SyntaxHighlighter.all()\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h3>NonAsyncServlet.java</h3>\r\n");
      out.write("<pre class=\"brush:java\">\r\n");
      out.write("package self.dreammaker.servlet.feature.async;\r\n");
      out.write("\r\n");
      out.write("import java.io.IOException;\r\n");
      out.write("import java.io.PrintWriter;\r\n");
      out.write("\r\n");
      out.write("import javax.servlet.ServletException;\r\n");
      out.write("import javax.servlet.annotation.WebServlet;\r\n");
      out.write("import javax.servlet.http.HttpServlet;\r\n");
      out.write("import javax.servlet.http.HttpServletRequest;\r\n");
      out.write("import javax.servlet.http.HttpServletResponse;\r\n");
      out.write("\r\n");
      out.write("@WebServlet(\"/servlet/3/nonAsync\")\r\n");
      out.write("public class NonAsyncServlet extends HttpServlet {\r\n");
      out.write("\r\n");
      out.write("\t@Override\r\n");
      out.write("\tprotected void doGet(HttpServletRequest req, HttpServletResponse resp)\r\n");
      out.write("\t\t\tthrows ServletException, IOException {\r\n");
      out.write("\t\t// TODO Auto-generated method stub\r\n");
      out.write("\t\tthis.doPost(req, resp);\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t@Override\r\n");
      out.write("\tprotected void doPost(HttpServletRequest req, HttpServletResponse resp)\r\n");
      out.write("\t\t\tthrows ServletException, IOException {\r\n");
      out.write("\t\t// TODO Auto-generated method stub\r\n");
      out.write("\t\tlong startTime = System.currentTimeMillis();\r\n");
      out.write("\t\tSystem.out.println(\"NonAsyncServlet start at thread \"\r\n");
      out.write("\t\t        +Thread.currentThread().getName()+\"with id of\"\r\n");
      out.write("\t\t\t\t+Thread.currentThread().getId());\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tString time = req.getParameter(\"time\");\r\n");
      out.write("\t\tint secs = Integer.valueOf(time);\r\n");
      out.write("\t\tif(secs > 10000){\r\n");
      out.write("\t\t\tsecs = 10000;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tlongProcessing(secs);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tPrintWriter out = resp.getWriter();\r\n");
      out.write("\t\tlong endTime = System.currentTimeMillis();\r\n");
      out.write("\t\tout.write(\"Processing done for \" + secs + \" milliseconds!\");\r\n");
      out.write("\t\tSystem.out.println(\"NonAyncServlet take \"+(endTime-startTime)+\" ms.\");\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tprotected void longProcessing(int secs){\r\n");
      out.write("\t\ttry {\r\n");
      out.write("\t\t\tThread.sleep(secs);\r\n");
      out.write("\t\t} catch (InterruptedException e) {\r\n");
      out.write("\t\t\t// TODO Auto-generated catch block\r\n");
      out.write("\t\t\te.printStackTrace();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("</pre>\r\n");
      out.write("<h3>AsyncServlet.java</h3>\r\n");
      out.write("<pre class=\"brush:java\">\r\n");
      out.write("package self.dreammaker.servlet.feature.async;\r\n");
      out.write("\r\n");
      out.write("import java.io.IOException;\r\n");
      out.write("import java.io.PrintWriter;\r\n");
      out.write("import java.util.concurrent.ThreadPoolExecutor;\r\n");
      out.write("\r\n");
      out.write("import javax.servlet.AsyncContext;\r\n");
      out.write("import javax.servlet.ServletException;\r\n");
      out.write("import javax.servlet.annotation.WebServlet;\r\n");
      out.write("import javax.servlet.http.HttpServlet;\r\n");
      out.write("import javax.servlet.http.HttpServletRequest;\r\n");
      out.write("import javax.servlet.http.HttpServletResponse;\r\n");
      out.write("\r\n");
      out.write("@WebServlet(urlPatterns=\"/servlet/3/async\",asyncSupported=true)\r\n");
      out.write("public class AsyncServlet extends HttpServlet {\r\n");
      out.write("\r\n");
      out.write("\t@Override\r\n");
      out.write("\tprotected void doGet(HttpServletRequest req, HttpServletResponse resp)\r\n");
      out.write("\t\t\tthrows ServletException, IOException {\r\n");
      out.write("\t\t// TODO Auto-generated method stub\r\n");
      out.write("\t\tthis.doPost(req, resp);\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t@Override\r\n");
      out.write("\tprotected void doPost(HttpServletRequest req, HttpServletResponse resp)\r\n");
      out.write("\t\t\tthrows ServletException, IOException {\r\n");
      out.write("\t\t// TODO Auto-generated method stub\r\n");
      out.write("\t\tlong startTime = System.currentTimeMillis();\r\n");
      out.write("\t\tSystem.out.println(\"AsyncServlet start at thread \"\r\n");
      out.write("\t\t        +Thread.currentThread().getName()+\"with id of\"\r\n");
      out.write("\t\t\t\t+Thread.currentThread().getId());\r\n");
      out.write("\t\t\r\n");
      out.write("\t\treq.setAttribute(\"org.apache.catalina.ASYNC_SUPPORTED\", true);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tString time = req.getParameter(\"time\");\r\n");
      out.write("\t\tint secs = Integer.valueOf(time);\r\n");
      out.write("\t\tif(secs > 10000){\r\n");
      out.write("\t\t\tsecs = 10000;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tAsyncContext asyncCtx = req.startAsync();\r\n");
      out.write("\t\tasyncCtx.addListener(new AppAsyncListener());\r\n");
      out.write("\t\tasyncCtx.setTimeout(9000);\r\n");
      out.write("\t\t\r\n");
      out.write("        ThreadPoolExecutor executor = (ThreadPoolExecutor) req\r\n");
      out.write("                .getServletContext().getAttribute(\"executor\");\r\n");
      out.write(" \r\n");
      out.write("        executor.execute(new AsyncRequestProcessor(asyncCtx, secs));\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tPrintWriter out = resp.getWriter();\r\n");
      out.write("\t\tlong endTime = System.currentTimeMillis();\r\n");
      out.write("\t\tout.write(\"Processing done for \" + secs + \" milliseconds!\");\r\n");
      out.write("\t\tSystem.out.println(\"AyncServlet take \"+(endTime-startTime)+\" ms.\");\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</pre>\r\n");
      out.write("<h3>AppContextListener.java</h3>\r\n");
      out.write("<pre class=\"brush:java\">\r\n");
      out.write("package self.dreammaker.servlet.feature.async;\r\n");
      out.write("\r\n");
      out.write("import java.util.concurrent.ArrayBlockingQueue;\r\n");
      out.write("import java.util.concurrent.ThreadPoolExecutor;\r\n");
      out.write("import java.util.concurrent.TimeUnit;\r\n");
      out.write("\r\n");
      out.write("import javax.servlet.ServletContextEvent;\r\n");
      out.write("import javax.servlet.ServletContextListener;\r\n");
      out.write("import javax.servlet.annotation.WebListener;\r\n");
      out.write("\r\n");
      out.write("@WebListener\r\n");
      out.write("public class AppContextListener implements ServletContextListener {\r\n");
      out.write("\r\n");
      out.write("\t@Override\r\n");
      out.write("\tpublic void contextInitialized(ServletContextEvent sce) {\r\n");
      out.write("\t\t// TODO Auto-generated method stub\r\n");
      out.write("        ThreadPoolExecutor executor = new ThreadPoolExecutor(100, 200, 50000L,\r\n");
      out.write("                TimeUnit.MILLISECONDS, new ArrayBlockingQueue<Runnable>(100));\r\n");
      out.write("        sce.getServletContext().setAttribute(\"executor\",\r\n");
      out.write("                executor);\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t@Override\r\n");
      out.write("\tpublic void contextDestroyed(ServletContextEvent sce) {\r\n");
      out.write("\t\t// TODO Auto-generated method stub\r\n");
      out.write("        ThreadPoolExecutor executor = (ThreadPoolExecutor) sce\r\n");
      out.write("                .getServletContext().getAttribute(\"executor\");\r\n");
      out.write("        executor.shutdown();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</pre>\r\n");
      out.write("<h3>AppAsyncListener.java</h3>\r\n");
      out.write("<pre class=\"brush:java\">\r\n");
      out.write("package self.dreammaker.servlet.feature.async;\r\n");
      out.write("\r\n");
      out.write("import java.io.IOException;\r\n");
      out.write("import java.io.PrintWriter;\r\n");
      out.write("\r\n");
      out.write("import javax.servlet.AsyncEvent;\r\n");
      out.write("import javax.servlet.AsyncListener;\r\n");
      out.write("import javax.servlet.ServletResponse;\r\n");
      out.write("import javax.servlet.annotation.WebListener;\r\n");
      out.write("\r\n");
      out.write("@WebListener\r\n");
      out.write("public class AppAsyncListener implements AsyncListener {\r\n");
      out.write("\r\n");
      out.write("\t@Override\r\n");
      out.write("\tpublic void onComplete(AsyncEvent event) throws IOException {\r\n");
      out.write("\t\t// TODO Auto-generated method stub\r\n");
      out.write("\t\tSystem.out.println(\"AppAsyncListener onComplete\");\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t@Override\r\n");
      out.write("\tpublic void onTimeout(AsyncEvent event) throws IOException {\r\n");
      out.write("\t\t// TODO Auto-generated method stub\r\n");
      out.write("\t\tSystem.out.println(\"AppAsyncListener onTimeout\");\r\n");
      out.write("\t\tServletResponse response = event.getAsyncContext().getResponse();\r\n");
      out.write("        PrintWriter out = response.getWriter();\r\n");
      out.write("        out.write(\"TimeOut Error in Processing\");\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t@Override\r\n");
      out.write("\tpublic void onError(AsyncEvent event) throws IOException {\r\n");
      out.write("\t\t// TODO Auto-generated method stub\r\n");
      out.write("\t\tSystem.out.println(\"AppAsyncListener onError\");\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t@Override\r\n");
      out.write("\tpublic void onStartAsync(AsyncEvent event) throws IOException {\r\n");
      out.write("\t\t// TODO Auto-generated method stub\r\n");
      out.write("\t\tSystem.out.println(\"AppAsyncListener onStartAsync\");\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("</pre>\r\n");
      out.write("<h3>AsyncRequestProcessor.java</h3>\r\n");
      out.write("<pre class=\"brush:java\">\r\n");
      out.write("package self.dreammaker.servlet.feature.async;\r\n");
      out.write("\r\n");
      out.write("import java.io.IOException;\r\n");
      out.write("import java.io.PrintWriter;\r\n");
      out.write("\r\n");
      out.write("import javax.servlet.AsyncContext;\r\n");
      out.write("\r\n");
      out.write("public class AsyncRequestProcessor implements Runnable {\r\n");
      out.write("    \r\n");
      out.write("\tprivate AsyncContext asyncContext;\r\n");
      out.write("\tprivate int secs;\r\n");
      out.write("\t\r\n");
      out.write("\tpublic AsyncRequestProcessor(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tpublic AsyncRequestProcessor(AsyncContext asyncCtx, int secs){\r\n");
      out.write("\t\tthis.asyncContext = asyncCtx;\r\n");
      out.write("\t\tthis.secs = secs;\r\n");
      out.write("\t}\r\n");
      out.write("\t@Override\r\n");
      out.write("\tpublic void run() {\r\n");
      out.write("\t\t// TODO Auto-generated method stub\r\n");
      out.write("        System.out.println(\"Async Supported? \"\r\n");
      out.write("                + asyncContext.getRequest().isAsyncSupported());\r\n");
      out.write("        longProcessing(secs);\r\n");
      out.write("        try {\r\n");
      out.write("            PrintWriter out = asyncContext.getResponse().getWriter();\r\n");
      out.write("            out.write(\"Processing done for \" + secs + \" milliseconds!!\");\r\n");
      out.write("        } catch (IOException e) {\r\n");
      out.write("            e.printStackTrace();\r\n");
      out.write("        }\r\n");
      out.write("        //complete the processing\r\n");
      out.write("        asyncContext.complete();        \r\n");
      out.write("\t}\r\n");
      out.write("    \r\n");
      out.write("\tprivate void longProcessing(int secs){\r\n");
      out.write("\t\ttry {\r\n");
      out.write("\t\t\tThread.sleep(secs);\r\n");
      out.write("\t\t} catch (InterruptedException e) {\r\n");
      out.write("\t\t\t// TODO Auto-generated catch block\r\n");
      out.write("\t\t\te.printStackTrace();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</pre>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
